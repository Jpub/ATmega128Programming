
CH_18_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000142  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000138  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000191  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  000007a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000831  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	56 c0       	rjmp	.+172    	; 0x162 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2a 97       	sbiw	r28, 0x0a	; 10
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t numbers[]
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
	= {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
	int count = 0;				// 현재 표시할 숫자
	DDRB = 0xFF;				// 제어핀 8개를 출력으로 설정
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	87 bb       	out	0x17, r24	; 23

int main(void)
{
	uint8_t numbers[]
	= {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
	int count = 0;				// 현재 표시할 숫자
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = 0xFF;				// 제어핀 8개를 출력으로 설정
	
	while(1)
	{
		PORTB = numbers[count];		// 숫자 데이터 출력
		count = (count + 1) % 10;		// 다음에 표시할 숫자
  e6:	0a e0       	ldi	r16, 0x0A	; 10
  e8:	10 e0       	ldi	r17, 0x00	; 0
	int count = 0;				// 현재 표시할 숫자
	DDRB = 0xFF;				// 제어핀 8개를 출력으로 설정
	
	while(1)
	{
		PORTB = numbers[count];		// 숫자 데이터 출력
  ea:	e1 e0       	ldi	r30, 0x01	; 1
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ec 0f       	add	r30, r28
  f0:	fd 1f       	adc	r31, r29
  f2:	e8 0f       	add	r30, r24
  f4:	f9 1f       	adc	r31, r25
  f6:	20 81       	ld	r18, Z
  f8:	28 bb       	out	0x18, r18	; 24
		count = (count + 1) % 10;		// 다음에 표시할 숫자
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	b8 01       	movw	r22, r16
  fe:	0a d0       	rcall	.+20     	; 0x114 <__divmodhi4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	33 ed       	ldi	r19, 0xD3	; 211
 104:	40 e3       	ldi	r20, 0x30	; 48
 106:	21 50       	subi	r18, 0x01	; 1
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	40 40       	sbci	r20, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x4e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x58>
 110:	00 00       	nop
 112:	eb cf       	rjmp	.-42     	; 0xea <main+0x32>

00000114 <__divmodhi4>:
 114:	97 fb       	bst	r25, 7
 116:	07 2e       	mov	r0, r23
 118:	16 f4       	brtc	.+4      	; 0x11e <__divmodhi4+0xa>
 11a:	00 94       	com	r0
 11c:	06 d0       	rcall	.+12     	; 0x12a <__divmodhi4_neg1>
 11e:	77 fd       	sbrc	r23, 7
 120:	08 d0       	rcall	.+16     	; 0x132 <__divmodhi4_neg2>
 122:	0b d0       	rcall	.+22     	; 0x13a <__udivmodhi4>
 124:	07 fc       	sbrc	r0, 7
 126:	05 d0       	rcall	.+10     	; 0x132 <__divmodhi4_neg2>
 128:	3e f4       	brtc	.+14     	; 0x138 <__divmodhi4_exit>

0000012a <__divmodhi4_neg1>:
 12a:	90 95       	com	r25
 12c:	81 95       	neg	r24
 12e:	9f 4f       	sbci	r25, 0xFF	; 255
 130:	08 95       	ret

00000132 <__divmodhi4_neg2>:
 132:	70 95       	com	r23
 134:	61 95       	neg	r22
 136:	7f 4f       	sbci	r23, 0xFF	; 255

00000138 <__divmodhi4_exit>:
 138:	08 95       	ret

0000013a <__udivmodhi4>:
 13a:	aa 1b       	sub	r26, r26
 13c:	bb 1b       	sub	r27, r27
 13e:	51 e1       	ldi	r21, 0x11	; 17
 140:	07 c0       	rjmp	.+14     	; 0x150 <__udivmodhi4_ep>

00000142 <__udivmodhi4_loop>:
 142:	aa 1f       	adc	r26, r26
 144:	bb 1f       	adc	r27, r27
 146:	a6 17       	cp	r26, r22
 148:	b7 07       	cpc	r27, r23
 14a:	10 f0       	brcs	.+4      	; 0x150 <__udivmodhi4_ep>
 14c:	a6 1b       	sub	r26, r22
 14e:	b7 0b       	sbc	r27, r23

00000150 <__udivmodhi4_ep>:
 150:	88 1f       	adc	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	5a 95       	dec	r21
 156:	a9 f7       	brne	.-22     	; 0x142 <__udivmodhi4_loop>
 158:	80 95       	com	r24
 15a:	90 95       	com	r25
 15c:	bc 01       	movw	r22, r24
 15e:	cd 01       	movw	r24, r26
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
