
CH_09_09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000469  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000230  00000000  00000000  00000889  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cd  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a8  00000000  00000000  00001045  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	f3 c0       	rjmp	.+486    	; 0x29c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#include <util/delay.h>
#include <string.h>
#include "UART1.h"

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	64 97       	sbiw	r28, 0x14	; 20
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t counter = 100; 		// 카운터
	int index = 0;				// 수신 버퍼에 저장할 위치
	int process_data = 0;			// 문자열 처리
	char buffer[20] = "";			// 수신 데이터 버퍼
  cc:	19 82       	std	Y+1, r1	; 0x01
  ce:	1a 82       	std	Y+2, r1	; 0x02
  d0:	1b 82       	std	Y+3, r1	; 0x03
  d2:	1c 82       	std	Y+4, r1	; 0x04
  d4:	fe 01       	movw	r30, r28
  d6:	35 96       	adiw	r30, 0x05	; 5
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	df 01       	movw	r26, r30
  dc:	1d 92       	st	X+, r1
  de:	8a 95       	dec	r24
  e0:	e9 f7       	brne	.-6      	; 0xdc <main+0x24>
	char data;					// 수신 데이터
	
	UART1_init();				// UART 통신 초기화
  e2:	4d d0       	rcall	.+154    	; 0x17e <UART1_init>
	
	UART1_print_string("Current Counter Value : ");
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	72 d0       	rcall	.+228    	; 0x1ce <UART1_print_string>
	UART1_print_1_byte_number(counter);
  ea:	84 e6       	ldi	r24, 0x64	; 100
  ec:	7e d0       	rcall	.+252    	; 0x1ea <UART1_print_1_byte_number>
	UART1_print_string("\r\n");
  ee:	89 e1       	ldi	r24, 0x19	; 25
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	6d d0       	rcall	.+218    	; 0x1ce <UART1_print_string>
#include <string.h>
#include "UART1.h"

int main(void)
{
	uint8_t counter = 100; 		// 카운터
  f4:	0f 2e       	mov	r0, r31
  f6:	f4 e6       	ldi	r31, 0x64	; 100
  f8:	df 2e       	mov	r13, r31
  fa:	f0 2d       	mov	r31, r0
  fc:	b1 2c       	mov	r11, r1
  fe:	c1 2c       	mov	r12, r1
 100:	fe 01       	movw	r30, r28
 102:	31 96       	adiw	r30, 0x01	; 1
 104:	7f 01       	movw	r14, r30
 106:	0b 2d       	mov	r16, r11
 108:	1c 2d       	mov	r17, r12
	UART1_print_1_byte_number(counter);
	UART1_print_string("\r\n");
	
	while(1)
	{
		data = UART1_receive();		// 데이터 수신
 10a:	59 d0       	rcall	.+178    	; 0x1be <UART1_receive>
		if(data == TERMINATOR){		// 종료 문자를 수신한 경우
 10c:	8d 30       	cpi	r24, 0x0D	; 13
 10e:	79 f4       	brne	.+30     	; 0x12e <main+0x76>
			buffer[index] = '\0';
 110:	e1 e0       	ldi	r30, 0x01	; 1
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	ec 0f       	add	r30, r28
 116:	fd 1f       	adc	r31, r29
 118:	e0 0f       	add	r30, r16
 11a:	f1 1f       	adc	r31, r17
 11c:	10 82       	st	Z, r1
			buffer[index] = data;		// 수신 버퍼에 저장
			index++;
		}
		
		if(process_data == 1){		// 문자열 처리
			if(strcmp(buffer, "DOWN") == 0){	// 카운터 감소
 11e:	6c e1       	ldi	r22, 0x1C	; 28
 120:	71 e0       	ldi	r23, 0x01	; 1
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	b1 d0       	rcall	.+354    	; 0x28a <strcmp>
 128:	89 2b       	or	r24, r25
 12a:	89 f4       	brne	.+34     	; 0x14e <main+0x96>
 12c:	06 c0       	rjmp	.+12     	; 0x13a <main+0x82>
		if(data == TERMINATOR){		// 종료 문자를 수신한 경우
			buffer[index] = '\0';
			process_data = 1;			// 수신 문자열 처리 지시
		}
		else{
			buffer[index] = data;		// 수신 버퍼에 저장
 12e:	d7 01       	movw	r26, r14
 130:	8d 93       	st	X+, r24
 132:	7d 01       	movw	r14, r26
			index++;
 134:	0f 5f       	subi	r16, 0xFF	; 255
 136:	1f 4f       	sbci	r17, 0xFF	; 255
 138:	e8 cf       	rjmp	.-48     	; 0x10a <main+0x52>
		}
		
		if(process_data == 1){		// 문자열 처리
			if(strcmp(buffer, "DOWN") == 0){	// 카운터 감소
				counter--;
 13a:	da 94       	dec	r13
				UART1_print_string("Current Counter Value : ");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	46 d0       	rcall	.+140    	; 0x1ce <UART1_print_string>
				UART1_print_1_byte_number(counter);
 142:	8d 2d       	mov	r24, r13
 144:	52 d0       	rcall	.+164    	; 0x1ea <UART1_print_1_byte_number>
				UART1_print_string("\r\n");
 146:	89 e1       	ldi	r24, 0x19	; 25
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	41 d0       	rcall	.+130    	; 0x1ce <UART1_print_string>
 14c:	d9 cf       	rjmp	.-78     	; 0x100 <main+0x48>
			}
			else if(strcmp(buffer, "UP") == 0){	// 카운터 증가
 14e:	61 e2       	ldi	r22, 0x21	; 33
 150:	71 e0       	ldi	r23, 0x01	; 1
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	99 d0       	rcall	.+306    	; 0x28a <strcmp>
 158:	89 2b       	or	r24, r25
 15a:	51 f4       	brne	.+20     	; 0x170 <main+0xb8>
				counter++;
 15c:	d3 94       	inc	r13
				UART1_print_string("Current Counter Value : ");
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	35 d0       	rcall	.+106    	; 0x1ce <UART1_print_string>
				UART1_print_1_byte_number(counter);
 164:	8d 2d       	mov	r24, r13
 166:	41 d0       	rcall	.+130    	; 0x1ea <UART1_print_1_byte_number>
				UART1_print_string("\r\n");
 168:	89 e1       	ldi	r24, 0x19	; 25
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	30 d0       	rcall	.+96     	; 0x1ce <UART1_print_string>
 16e:	c8 cf       	rjmp	.-112    	; 0x100 <main+0x48>
			}
			else{					// 잘못된 명령어
				UART1_print_string("** Unknown Command **");
 170:	84 e2       	ldi	r24, 0x24	; 36
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	2c d0       	rcall	.+88     	; 0x1ce <UART1_print_string>
				UART1_print_string("\r\n");
 176:	89 e1       	ldi	r24, 0x19	; 25
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	29 d0       	rcall	.+82     	; 0x1ce <UART1_print_string>
 17c:	c1 cf       	rjmp	.-126    	; 0x100 <main+0x48>

0000017e <UART1_init>:
﻿#include <avr/io.h>

void UART1_init(void)
{
	UBRR1H = 0x00;			// 9600 보율로 설정
 17e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= _BV(U2X1);			// 2배속 모드
 188:	eb e9       	ldi	r30, 0x9B	; 155
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	80 83       	st	Z, r24
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR1C |= 0x06;
 192:	ed e9       	ldi	r30, 0x9D	; 157
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	86 60       	ori	r24, 0x06	; 6
 19a:	80 83       	st	Z, r24
	
	UCSR1B |= _BV(RXEN1);		// 송수신 가능
 19c:	ea e9       	ldi	r30, 0x9A	; 154
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <UART1_transmit>:
}

void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
 1ae:	eb e9       	ldi	r30, 0x9B	; 155
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	90 81       	ld	r25, Z
 1b4:	95 ff       	sbrs	r25, 5
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <UART1_transmit+0x4>
	UDR1 = data;				// 데이터 전송
 1b8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 1bc:	08 95       	ret

000001be <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );	// 데이터 수신 대기
 1be:	eb e9       	ldi	r30, 0x9B	; 155
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 23       	and	r24, r24
 1c6:	ec f7       	brge	.-6      	; 0x1c2 <UART1_receive+0x4>
	return UDR1;
 1c8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 1cc:	08 95       	ret

000001ce <UART1_print_string>:

void UART1_print_string(char *str)	// 문자열 송신
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)			// ‘\0’ 문자를 만날 때까지 반복
 1d4:	88 81       	ld	r24, Y
 1d6:	88 23       	and	r24, r24
 1d8:	29 f0       	breq	.+10     	; 0x1e4 <UART1_print_string+0x16>
 1da:	21 96       	adiw	r28, 0x01	; 1
	UART1_transmit(str[i]);			// 바이트 단위 출력
 1dc:	e8 df       	rcall	.-48     	; 0x1ae <UART1_transmit>
	return UDR1;
}

void UART1_print_string(char *str)	// 문자열 송신
{
	for(int i = 0; str[i]; i++)			// ‘\0’ 문자를 만날 때까지 반복
 1de:	89 91       	ld	r24, Y+
 1e0:	81 11       	cpse	r24, r1
 1e2:	fc cf       	rjmp	.-8      	; 0x1dc <UART1_print_string+0xe>
	UART1_transmit(str[i]);			// 바이트 단위 출력
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <UART1_print_1_byte_number>:

void UART1_print_1_byte_number(uint8_t n)
{
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <UART1_print_1_byte_number+0xe>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <UART1_print_1_byte_number+0x10>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 1fe:	40 e3       	ldi	r20, 0x30	; 48
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	49 83       	std	Y+1, r20	; 0x01
 208:	5a 83       	std	Y+2, r21	; 0x02
 20a:	6b 83       	std	Y+3, r22	; 0x03
 20c:	7c 83       	std	Y+4, r23	; 0x04
	int i, index = 0;
	
	if(n > 0){					// 문자열 변환
 20e:	88 23       	and	r24, r24
 210:	09 f1       	breq	.+66     	; 0x254 <UART1_print_1_byte_number+0x6a>
 212:	fe 01       	movw	r30, r28
 214:	31 96       	adiw	r30, 0x01	; 1
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; n != 0 ; i++)
		{
			numString[i] = n % 10 + '0';
 21a:	4d ec       	ldi	r20, 0xCD	; 205
 21c:	84 9f       	mul	r24, r20
 21e:	91 2d       	mov	r25, r1
 220:	11 24       	eor	r1, r1
 222:	96 95       	lsr	r25
 224:	96 95       	lsr	r25
 226:	96 95       	lsr	r25
 228:	39 2f       	mov	r19, r25
 22a:	33 0f       	add	r19, r19
 22c:	23 2f       	mov	r18, r19
 22e:	22 0f       	add	r18, r18
 230:	22 0f       	add	r18, r18
 232:	23 0f       	add	r18, r19
 234:	82 1b       	sub	r24, r18
 236:	80 5d       	subi	r24, 0xD0	; 208
 238:	81 93       	st	Z+, r24
			n = n / 10;
 23a:	89 2f       	mov	r24, r25
{
	char numString[4] = "0";
	int i, index = 0;
	
	if(n > 0){					// 문자열 변환
		for(i = 0; n != 0 ; i++)
 23c:	0f 5f       	subi	r16, 0xFF	; 255
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
 240:	91 11       	cpse	r25, r1
 242:	ec cf       	rjmp	.-40     	; 0x21c <UART1_print_1_byte_number+0x32>
		{
			numString[i] = n % 10 + '0';
			n = n / 10;
		}
		numString[i] = '\0';
 244:	fe 01       	movw	r30, r28
 246:	e0 0f       	add	r30, r16
 248:	f1 1f       	adc	r31, r17
 24a:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
 24c:	01 50       	subi	r16, 0x01	; 1
 24e:	11 09       	sbc	r17, r1
	}
	
	for(i = index; i >= 0; i--)		// 변환된 문자열을 역순으로 출력
 250:	1a f4       	brpl	.+6      	; 0x258 <UART1_print_1_byte_number+0x6e>
 252:	10 c0       	rjmp	.+32     	; 0x274 <UART1_print_1_byte_number+0x8a>
}

void UART1_print_1_byte_number(uint8_t n)
{
	char numString[4] = "0";
	int i, index = 0;
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	ce 01       	movw	r24, r28
 25a:	80 0f       	add	r24, r16
 25c:	91 1f       	adc	r25, r17
 25e:	9c 01       	movw	r18, r24
 260:	2e 5f       	subi	r18, 0xFE	; 254
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	79 01       	movw	r14, r18
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)		// 변환된 문자열을 역순으로 출력
	UART1_transmit(numString[i]);
 266:	f7 01       	movw	r30, r14
 268:	82 91       	ld	r24, -Z
 26a:	7f 01       	movw	r14, r30
 26c:	a0 df       	rcall	.-192    	; 0x1ae <UART1_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)		// 변환된 문자열을 역순으로 출력
 26e:	01 50       	subi	r16, 0x01	; 1
 270:	11 09       	sbc	r17, r1
 272:	ca f7       	brpl	.-14     	; 0x266 <UART1_print_1_byte_number+0x7c>
	UART1_transmit(numString[i]);
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	08 95       	ret

0000028a <strcmp>:
 28a:	fb 01       	movw	r30, r22
 28c:	dc 01       	movw	r26, r24
 28e:	8d 91       	ld	r24, X+
 290:	01 90       	ld	r0, Z+
 292:	80 19       	sub	r24, r0
 294:	01 10       	cpse	r0, r1
 296:	d9 f3       	breq	.-10     	; 0x28e <strcmp+0x4>
 298:	99 0b       	sbc	r25, r25
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
