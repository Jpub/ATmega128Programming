
CH_08_04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000199  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000112  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000169  00000000  00000000  0000047f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b3  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	23 c0       	rjmp	.+70     	; 0xe2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return ( (pattern << 1) | (pattern >> 7) );
}

int main(void)
{
	DDRB = 0xFF;				// PORT B 핀을 출력으로 설정
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	DDRF &= ~0x04;			// PORT F의 PF2 핀을 입력으로 설정
  a2:	e1 e6       	ldi	r30, 0x61	; 97
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	80 83       	st	Z, r24
	
	char pattern = 0x01;			// 초기 출력값
	PORTB = pattern;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	88 bb       	out	0x18, r24	; 24
	
	// 이전 및 현재 버튼의 상태
	char state_previous = 0, state_current;
  b0:	20 e0       	ldi	r18, 0x00	; 0
int main(void)
{
	DDRB = 0xFF;				// PORT B 핀을 출력으로 설정
	DDRF &= ~0x04;			// PORT F의 PF2 핀을 입력으로 설정
	
	char pattern = 0x01;			// 초기 출력값
  b2:	31 e0       	ldi	r19, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x1a>
{
	return ( (pattern << 1) | (pattern >> 7) );
}

int main(void)
{
  b6:	28 2f       	mov	r18, r24
	// 이전 및 현재 버튼의 상태
	char state_previous = 0, state_current;
	
	while (1)
	{
		state_current = (PINF & 0x04) >> 2;	// 버튼 상태 읽기
  b8:	80 b1       	in	r24, 0x00	; 0
  ba:	82 fb       	bst	r24, 2
  bc:	88 27       	eor	r24, r24
  be:	80 f9       	bld	r24, 0
		// 버튼이 눌러지지 않은 상태에서 눌러진 상태로 바뀌는 경우
		if(state_current == 1 && state_previous == 0){
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	c9 f7       	brne	.-14     	; 0xb6 <main+0x18>
  c4:	21 11       	cpse	r18, r1
  c6:	f7 cf       	rjmp	.-18     	; 0xb6 <main+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	46 e7       	ldi	r20, 0x76	; 118
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x30>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x3a>
  d8:	00 00       	nop
#include <avr/io.h>
#include <util/delay.h>

char circular_shift_left(char pattern)
{
	return ( (pattern << 1) | (pattern >> 7) );
  da:	33 0f       	add	r19, r19
  dc:	31 1d       	adc	r19, r1
		state_current = (PINF & 0x04) >> 2;	// 버튼 상태 읽기
		// 버튼이 눌러지지 않은 상태에서 눌러진 상태로 바뀌는 경우
		if(state_current == 1 && state_previous == 0){
			_delay_ms(30);			// 디바운스
			pattern = circular_shift_left(pattern);
			PORTB = pattern;
  de:	38 bb       	out	0x18, r19	; 24
  e0:	ea cf       	rjmp	.-44     	; 0xb6 <main+0x18>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
