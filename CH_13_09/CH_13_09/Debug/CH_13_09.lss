
CH_13_09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000196  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000fe  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000167  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018c  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f1  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6e d0       	rcall	.+220    	; 0x186 <main>
  aa:	bb c0       	rjmp	.+374    	; 0x222 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
// 프로그램 시작 이후의 경과 시간
volatile unsigned long timer0_millis = 0;
volatile int timer0_micros = 0;

ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	unsigned long m = timer0_millis;
  d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer0_millis>
  dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer0_millis+0x1>
  e0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer0_millis+0x2>
  e4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer0_millis+0x3>
	int f = timer0_micros;
  e8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
  ec:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
	
	m += MILLIS_INCREMENT_PER_OVERFLOW;	// 밀리초 단위 시간 증가
  f0:	8c 01       	movw	r16, r24
  f2:	9d 01       	movw	r18, r26
  f4:	0f 5f       	subi	r16, 0xFF	; 255
  f6:	1f 4f       	sbci	r17, 0xFF	; 255
  f8:	2f 4f       	sbci	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
	f += MICROS_INCREMENT_PER_OVERFLOW;	// 마이크로초 단위 시간 증가
  fc:	ca 01       	movw	r24, r20
  fe:	48 96       	adiw	r24, 0x18	; 24
	
	// 마이크로초가 1000을 넘어가면 밀리초를 증가시킴
	m += (f / 1000);
 100:	68 ee       	ldi	r22, 0xE8	; 232
 102:	73 e0       	ldi	r23, 0x03	; 3
 104:	67 d0       	rcall	.+206    	; 0x1d4 <__divmodhi4>
 106:	fc 01       	movw	r30, r24
 108:	ab 01       	movw	r20, r22
 10a:	77 0f       	add	r23, r23
 10c:	66 0b       	sbc	r22, r22
 10e:	77 0b       	sbc	r23, r23
 110:	d9 01       	movw	r26, r18
 112:	c8 01       	movw	r24, r16
 114:	84 0f       	add	r24, r20
 116:	95 1f       	adc	r25, r21
 118:	a6 1f       	adc	r26, r22
 11a:	b7 1f       	adc	r27, r23
	f = f % 1000;
	
	timer0_millis = m;
 11c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer0_millis>
 120:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer0_millis+0x1>
 124:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <timer0_millis+0x2>
 128:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <timer0_millis+0x3>
	timer0_micros = f;
 12c:	f0 93 01 01 	sts	0x0101, r31	; 0x800101 <_edata+0x1>
 130:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	0f 90       	pop	r0
 152:	0b be       	out	0x3b, r0	; 59
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;		// 상태 레지스터 값 저장
 15e:	2f b7       	in	r18, 0x3f	; 63
	
	// timer0_millis 값을 읽는 동안
	// timer0_millis 값이 변하지 않도록 인터럽트를 비활성화
	cli();
 160:	f8 94       	cli
	
	m = timer0_millis;
 162:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <timer0_millis>
 166:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <timer0_millis+0x1>
 16a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timer0_millis+0x2>
 16e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timer0_millis+0x3>
	
	SREG = oldSREG;			// 이전 상태 레지스터 값 복원
 172:	2f bf       	out	0x3f, r18	; 63
	
	return m;					// 프로그램 시작 후 경과 시간
}
 174:	08 95       	ret

00000176 <init_timer0>:

void init_timer0()
{
	TCCR0 |= (1 << CS02);			// 분주비를 64로 설정
 176:	83 b7       	in	r24, 0x33	; 51
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			// 오버플로 인터럽트 허용
 17c:	87 b7       	in	r24, 0x37	; 55
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	87 bf       	out	0x37, r24	; 55

	sei();							// 전역적으로 인터럽트 허용
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <main>:

int main(void)
{
	uint8_t state = 0;			// LED 상태
	
	init_timer0();				// 타이머/카운터 0번 초기화
 186:	f7 df       	rcall	.-18     	; 0x176 <init_timer0>

	DDRB = 0x01; 				// PB0 핀을 출력으로 설정
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;				// LED는 끈 상태에서 시작
 18c:	18 ba       	out	0x18, r1	; 24
	
	unsigned long time_previous, time_current;
	time_previous = millis();		// 시작 시간
 18e:	e7 df       	rcall	.-50     	; 0x15e <millis>
 190:	6b 01       	movw	r12, r22
 192:	7c 01       	movw	r14, r24
	sei();							// 전역적으로 인터럽트 허용
}

int main(void)
{
	uint8_t state = 0;			// LED 상태
 194:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned long time_previous, time_current;
	time_previous = millis();		// 시작 시간
	
	while(1)
	{
		time_current = millis();		// 현재 시간
 196:	e3 df       	rcall	.-58     	; 0x15e <millis>
		
		if((time_current - time_previous) > 1000){	// 1초 경과
 198:	8b 01       	movw	r16, r22
 19a:	9c 01       	movw	r18, r24
 19c:	0c 19       	sub	r16, r12
 19e:	1d 09       	sbc	r17, r13
 1a0:	2e 09       	sbc	r18, r14
 1a2:	3f 09       	sbc	r19, r15
 1a4:	09 3e       	cpi	r16, 0xE9	; 233
 1a6:	13 40       	sbci	r17, 0x03	; 3
 1a8:	21 05       	cpc	r18, r1
 1aa:	31 05       	cpc	r19, r1
 1ac:	a0 f3       	brcs	.-24     	; 0x196 <main+0x10>
			time_previous = time_current;
			
			state = (state + 1) % 2;		// LED 상태 반전
 1ae:	2c 2f       	mov	r18, r28
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	21 70       	andi	r18, 0x01	; 1
 1b8:	30 78       	andi	r19, 0x80	; 128
 1ba:	33 23       	and	r19, r19
 1bc:	34 f4       	brge	.+12     	; 0x1ca <main+0x44>
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	31 09       	sbc	r19, r1
 1c2:	2e 6f       	ori	r18, 0xFE	; 254
 1c4:	3f 6f       	ori	r19, 0xFF	; 255
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	c2 2f       	mov	r28, r18
			PORTB = state;
 1cc:	28 bb       	out	0x18, r18	; 24
	unsigned long time_previous, time_current;
	time_previous = millis();		// 시작 시간
	
	while(1)
	{
		time_current = millis();		// 현재 시간
 1ce:	6b 01       	movw	r12, r22
 1d0:	7c 01       	movw	r14, r24
 1d2:	e1 cf       	rjmp	.-62     	; 0x196 <main+0x10>

000001d4 <__divmodhi4>:
 1d4:	97 fb       	bst	r25, 7
 1d6:	07 2e       	mov	r0, r23
 1d8:	16 f4       	brtc	.+4      	; 0x1de <__divmodhi4+0xa>
 1da:	00 94       	com	r0
 1dc:	06 d0       	rcall	.+12     	; 0x1ea <__divmodhi4_neg1>
 1de:	77 fd       	sbrc	r23, 7
 1e0:	08 d0       	rcall	.+16     	; 0x1f2 <__divmodhi4_neg2>
 1e2:	0b d0       	rcall	.+22     	; 0x1fa <__udivmodhi4>
 1e4:	07 fc       	sbrc	r0, 7
 1e6:	05 d0       	rcall	.+10     	; 0x1f2 <__divmodhi4_neg2>
 1e8:	3e f4       	brtc	.+14     	; 0x1f8 <__divmodhi4_exit>

000001ea <__divmodhi4_neg1>:
 1ea:	90 95       	com	r25
 1ec:	81 95       	neg	r24
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	08 95       	ret

000001f2 <__divmodhi4_neg2>:
 1f2:	70 95       	com	r23
 1f4:	61 95       	neg	r22
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255

000001f8 <__divmodhi4_exit>:
 1f8:	08 95       	ret

000001fa <__udivmodhi4>:
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	51 e1       	ldi	r21, 0x11	; 17
 200:	07 c0       	rjmp	.+14     	; 0x210 <__udivmodhi4_ep>

00000202 <__udivmodhi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	a6 17       	cp	r26, r22
 208:	b7 07       	cpc	r27, r23
 20a:	10 f0       	brcs	.+4      	; 0x210 <__udivmodhi4_ep>
 20c:	a6 1b       	sub	r26, r22
 20e:	b7 0b       	sbc	r27, r23

00000210 <__udivmodhi4_ep>:
 210:	88 1f       	adc	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	5a 95       	dec	r21
 216:	a9 f7       	brne	.-22     	; 0x202 <__udivmodhi4_loop>
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	bc 01       	movw	r22, r24
 21e:	cd 01       	movw	r24, r26
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
