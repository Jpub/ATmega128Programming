
CH_27_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000526  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000385  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000460  00000000  00000000  00000c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000254  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000368  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	87 c0       	rjmp	.+270    	; 0x1d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

int main(void)
{
	uint8_t data;
	
	stdout = &OUTPUT;
  c8:	ec e1       	ldi	r30, 0x1C	; 28
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	93 83       	std	Z+3, r25	; 0x03
  d2:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	91 83       	std	Z+1, r25	; 0x01
  da:	80 83       	st	Z, r24
	
	UART0_init();				// UART0 통신 초기화
  dc:	05 d0       	rcall	.+10     	; 0xe8 <UART0_init>
	UART1_init();				// UART1 통신 초기화
  de:	15 d0       	rcall	.+42     	; 0x10a <UART1_init>
	
	while (1)
	{
		data = UART0_receive();
  e0:	10 d0       	rcall	.+32     	; 0x102 <UART0_receive>
		
		printf("%c", data);
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	3a d0       	rcall	.+116    	; 0x15a <putchar>
	}
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <main+0x18>

000000e8 <UART0_init>:
}

void UART0_transmit(char data)
{
	while( !(UCSR0A & (1 << UDRE0)) );	// 송신 가능 대기
	UDR0 = data;				// 데이터 전송
  e8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	89 b9       	out	0x09, r24	; 9
  f0:	59 9a       	sbi	0x0b, 1	; 11
  f2:	e5 e9       	ldi	r30, 0x95	; 149
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	80 83       	st	Z, r24
  fc:	54 9a       	sbi	0x0a, 4	; 10
  fe:	53 9a       	sbi	0x0a, 3	; 10
 100:	08 95       	ret

00000102 <UART0_receive>:
}

unsigned char UART0_receive(void)
{
	while( !(UCSR0A & (1<<RXC0)) );	// 데이터 수신 대기
 102:	5f 9b       	sbis	0x0b, 7	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <UART0_receive>
	return UDR0;
 106:	8c b1       	in	r24, 0x0c	; 12
}
 108:	08 95       	ret

0000010a <UART1_init>:
﻿#include <avr/io.h>

void UART1_init(void)
{
	UBRR1H = 0x00;			// 9600 보율로 설정
 10a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;
 10e:	8f ec       	ldi	r24, 0xCF	; 207
 110:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= _BV(U2X1);			// 2배속 모드
 114:	eb e9       	ldi	r30, 0x9B	; 155
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR1C |= 0x06;
 11e:	ed e9       	ldi	r30, 0x9D	; 157
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	86 60       	ori	r24, 0x06	; 6
 126:	80 83       	st	Z, r24
	
	UCSR1B |= _BV(RXEN1);		// 송수신 가능
 128:	ea e9       	ldi	r30, 0x9A	; 154
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);
 132:	80 81       	ld	r24, Z
 134:	88 60       	ori	r24, 0x08	; 8
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <UART1_transmit>:
}

void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
 13a:	eb e9       	ldi	r30, 0x9B	; 155
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	90 81       	ld	r25, Z
 140:	95 ff       	sbrs	r25, 5
 142:	fd cf       	rjmp	.-6      	; 0x13e <UART1_transmit+0x4>
	UDR1 = data;				// 데이터 전송
 144:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 148:	08 95       	ret

0000014a <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );	// 데이터 수신 대기
 14a:	eb e9       	ldi	r30, 0x9B	; 155
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	ec f7       	brge	.-6      	; 0x14e <UART1_receive+0x4>
	return UDR1;
 154:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 158:	08 95       	ret

0000015a <putchar>:
 15a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end+0x2>
 15e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x3>
 162:	00 c0       	rjmp	.+0      	; 0x164 <fputc>

00000164 <fputc>:
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	fb 01       	movw	r30, r22
 16e:	23 81       	ldd	r18, Z+3	; 0x03
 170:	21 fd       	sbrc	r18, 1
 172:	03 c0       	rjmp	.+6      	; 0x17a <fputc+0x16>
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	28 c0       	rjmp	.+80     	; 0x1ca <fputc+0x66>
 17a:	22 ff       	sbrs	r18, 2
 17c:	16 c0       	rjmp	.+44     	; 0x1aa <fputc+0x46>
 17e:	46 81       	ldd	r20, Z+6	; 0x06
 180:	57 81       	ldd	r21, Z+7	; 0x07
 182:	24 81       	ldd	r18, Z+4	; 0x04
 184:	35 81       	ldd	r19, Z+5	; 0x05
 186:	42 17       	cp	r20, r18
 188:	53 07       	cpc	r21, r19
 18a:	44 f4       	brge	.+16     	; 0x19c <fputc+0x38>
 18c:	a0 81       	ld	r26, Z
 18e:	b1 81       	ldd	r27, Z+1	; 0x01
 190:	9d 01       	movw	r18, r26
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	31 83       	std	Z+1, r19	; 0x01
 198:	20 83       	st	Z, r18
 19a:	8c 93       	st	X, r24
 19c:	26 81       	ldd	r18, Z+6	; 0x06
 19e:	37 81       	ldd	r19, Z+7	; 0x07
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	37 83       	std	Z+7, r19	; 0x07
 1a6:	26 83       	std	Z+6, r18	; 0x06
 1a8:	10 c0       	rjmp	.+32     	; 0x1ca <fputc+0x66>
 1aa:	eb 01       	movw	r28, r22
 1ac:	09 2f       	mov	r16, r25
 1ae:	18 2f       	mov	r17, r24
 1b0:	00 84       	ldd	r0, Z+8	; 0x08
 1b2:	f1 85       	ldd	r31, Z+9	; 0x09
 1b4:	e0 2d       	mov	r30, r0
 1b6:	09 95       	icall
 1b8:	89 2b       	or	r24, r25
 1ba:	e1 f6       	brne	.-72     	; 0x174 <fputc+0x10>
 1bc:	8e 81       	ldd	r24, Y+6	; 0x06
 1be:	9f 81       	ldd	r25, Y+7	; 0x07
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	9f 83       	std	Y+7, r25	; 0x07
 1c4:	8e 83       	std	Y+6, r24	; 0x06
 1c6:	81 2f       	mov	r24, r17
 1c8:	90 2f       	mov	r25, r16
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
