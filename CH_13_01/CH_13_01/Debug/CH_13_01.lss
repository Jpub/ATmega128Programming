
CH_13_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000c1  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007c  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000010d  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000147  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  0000062b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	39 d0       	rcall	.+114    	; 0x11c <main>
  aa:	43 c0       	rjmp	.+134    	; 0x132 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:

int count = 0;				// 오버플로가 발생한 횟수
int state = 0;				// LED 점멸 상태

ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	count++;
  c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
  c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
	if(count == 32){			// 오버플로 32회 발생 = 0.5초 경과
  ca:	80 32       	cpi	r24, 0x20	; 32
  cc:	91 05       	cpc	r25, r1
  ce:	29 f0       	breq	.+10     	; 0xda <__vector_16+0x2c>
int count = 0;				// 오버플로가 발생한 횟수
int state = 0;				// LED 점멸 상태

ISR(TIMER0_OVF_vect)
{
	count++;
  d0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
  d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
  d8:	18 c0       	rjmp	.+48     	; 0x10a <__vector_16+0x5c>
	if(count == 32){			// 오버플로 32회 발생 = 0.5초 경과
		count = 0;				// 카운터 초기화
  da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count+0x1>
  de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>
		state = !state;			// LED 상태 반전
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  ee:	23 2b       	or	r18, r19
  f0:	11 f0       	breq	.+4      	; 0xf6 <__vector_16+0x48>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if(state) PORTB = 0x01;		// LED 켜기
  fe:	89 2b       	or	r24, r25
 100:	19 f0       	breq	.+6      	; 0x108 <__vector_16+0x5a>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	88 bb       	out	0x18, r24	; 24
 106:	01 c0       	rjmp	.+2      	; 0x10a <__vector_16+0x5c>
		else PORTB = 0x00;			// LED 끄기
 108:	18 ba       	out	0x18, r1	; 24
	}
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:

int main(void)
{
	DDRB = 0x01; 				// PB0 핀을 출력으로 설정
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;				// LED는 끈 상태에서 시작
 120:	18 ba       	out	0x18, r1	; 24
	
	// 분주비를 1024로 설정
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
 122:	83 b7       	in	r24, 0x33	; 51
 124:	87 60       	ori	r24, 0x07	; 7
 126:	83 bf       	out	0x33, r24	; 51

	TIMSK |= (1 << TOIE0);			// 오버플로 인터럽트 허용
 128:	87 b7       	in	r24, 0x37	; 55
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	87 bf       	out	0x37, r24	; 55
	
	sei();							// 전역적으로 인터럽트 허용
 12e:	78 94       	sei
	
	while(1){ }
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x14>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
