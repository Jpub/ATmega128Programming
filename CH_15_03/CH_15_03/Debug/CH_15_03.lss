
CH_15_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000131  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d7  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015f  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018d  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000007cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2f c0       	rjmp	.+94     	; 0xfa <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>

int main(void)
{
	// 파형 출력 핀인 PB5(OC1A 핀), PB6 핀(OC1B 핀)을 출력으로 설정
	DDRB |= (1 << PB5) | (1 << PB6);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	80 66       	ori	r24, 0x60	; 96
  a2:	87 bb       	out	0x17, r24	; 23

	// 타이머/카운터 1번을 8비트 위상 교정 PWM 모드로 설정
	TCCR1A |= (1 << WGM10);
  a4:	8f b5       	in	r24, 0x2f	; 47
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	8f bd       	out	0x2f, r24	; 47
	
	// 비교일치 A는 비반전 모드, 비교일치 B는 반전 모드로 설정
	TCCR1A |= (1 << COM1A1);
  aa:	8f b5       	in	r24, 0x2f	; 47
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1) | (1 << COM1B0);
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	80 63       	ori	r24, 0x30	; 48
  b4:	8f bd       	out	0x2f, r24	; 47
	
	// 분주비를 256으로 설정
	TCCR1B |= (1 << CS12); // | (1 << CS10);
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	8e bd       	out	0x2e, r24	; 46

	int dim = 0;				// 현재 LED 밝기
	int direction = 1;			// 밝기 증가(1) 또는 감소(-1)
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
	TCCR1A |= (1 << COM1B1) | (1 << COM1B0);
	
	// 분주비를 256으로 설정
	TCCR1B |= (1 << CS12); // | (1 << CS10);

	int dim = 0;				// 현재 LED 밝기
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(10);
		
		dim += direction;			// 밝기 변화
		
		if(dim == 0) direction = 1;
		if(dim == 255) direction = -1;
  c4:	7f ef       	ldi	r23, 0xFF	; 255
  c6:	6f ef       	ldi	r22, 0xFF	; 255
		
		_delay_ms(10);
		
		dim += direction;			// 밝기 변화
		
		if(dim == 0) direction = 1;
  c8:	51 e0       	ldi	r21, 0x01	; 1
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x34>
  ce:	25 2f       	mov	r18, r21
  d0:	34 2f       	mov	r19, r20
	int dim = 0;				// 현재 LED 밝기
	int direction = 1;			// 밝기 증가(1) 또는 감소(-1)
	
	while(1)
	{
		OCR1A = dim;			// 듀티 사이클 설정
  d2:	9b bd       	out	0x2b, r25	; 43
  d4:	8a bd       	out	0x2a, r24	; 42
		OCR1B = dim;
  d6:	99 bd       	out	0x29, r25	; 41
  d8:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef e3       	ldi	r30, 0x3F	; 63
  dc:	fc e9       	ldi	r31, 0x9C	; 156
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x40>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x46>
  e4:	00 00       	nop
		
		_delay_ms(10);
		
		dim += direction;			// 밝기 변화
  e6:	82 0f       	add	r24, r18
  e8:	93 1f       	adc	r25, r19
		
		if(dim == 0) direction = 1;
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	81 f3       	breq	.-32     	; 0xce <main+0x30>
		if(dim == 255) direction = -1;
  ee:	8f 3f       	cpi	r24, 0xFF	; 255
  f0:	91 05       	cpc	r25, r1
  f2:	79 f7       	brne	.-34     	; 0xd2 <main+0x34>
  f4:	27 2f       	mov	r18, r23
  f6:	36 2f       	mov	r19, r22
  f8:	ec cf       	rjmp	.-40     	; 0xd2 <main+0x34>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
