
CH_09_06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001f8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002f1  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000212  00000000  00000000  00000649  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f2  00000000  00000000  00000d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	9f c0       	rjmp	.+318    	; 0x1f4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#include <avr/io.h>
#include "UART1.h"			// UART1 라이브러리를 위한 헤더 파일

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	69 97       	sbiw	r28, 0x19	; 25
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	UART1_init();				// UART1 초기화
  cc:	15 d0       	rcall	.+42     	; 0xf8 <UART1_init>
	
	char str[] = "Test using UART1 Library";
  ce:	89 e1       	ldi	r24, 0x19	; 25
  d0:	e3 e0       	ldi	r30, 0x03	; 3
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x20>
	uint8_t num = 128;
	
	UART1_print_string(str);		// 문자열 출력
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	29 d0       	rcall	.+82     	; 0x138 <UART1_print_string>
	UART1_print_string("\n\r");
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	26 d0       	rcall	.+76     	; 0x138 <UART1_print_string>
	
	UART1_print_1_byte_number(num);	// 1바이트 크기 정수 출력
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	32 d0       	rcall	.+100    	; 0x154 <UART1_print_1_byte_number>
	UART1_print_string("\n\r");
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	21 d0       	rcall	.+66     	; 0x138 <UART1_print_string>
	
	while (1){}
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x3e>

000000f8 <UART1_init>:

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );	// 데이터 수신 대기
	return UDR1;
}
  f8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 102:	eb e9       	ldi	r30, 0x9B	; 155
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
 10c:	ed e9       	ldi	r30, 0x9D	; 157
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	86 60       	ori	r24, 0x06	; 6
 114:	80 83       	st	Z, r24
 116:	ea e9       	ldi	r30, 0x9A	; 154
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	80 83       	st	Z, r24
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <UART1_transmit>:
 128:	eb e9       	ldi	r30, 0x9B	; 155
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <UART1_transmit+0x4>
 132:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 136:	08 95       	ret

00000138 <UART1_print_string>:

void UART1_print_string(char *str)	// 문자열 송신
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)			// ‘\0’ 문자를 만날 때까지 반복
 13e:	88 81       	ld	r24, Y
 140:	88 23       	and	r24, r24
 142:	29 f0       	breq	.+10     	; 0x14e <UART1_print_string+0x16>
 144:	21 96       	adiw	r28, 0x01	; 1
	UART1_transmit(str[i]);			// 바이트 단위 출력
 146:	f0 df       	rcall	.-32     	; 0x128 <UART1_transmit>
	return UDR1;
}

void UART1_print_string(char *str)	// 문자열 송신
{
	for(int i = 0; str[i]; i++)			// ‘\0’ 문자를 만날 때까지 반복
 148:	89 91       	ld	r24, Y+
 14a:	81 11       	cpse	r24, r1
 14c:	fc cf       	rjmp	.-8      	; 0x146 <UART1_print_string+0xe>
	UART1_transmit(str[i]);			// 바이트 단위 출력
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <UART1_print_1_byte_number>:

void UART1_print_1_byte_number(uint8_t n)
{
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <UART1_print_1_byte_number+0xe>
 162:	00 d0       	rcall	.+0      	; 0x164 <UART1_print_1_byte_number+0x10>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 168:	40 e3       	ldi	r20, 0x30	; 48
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	49 83       	std	Y+1, r20	; 0x01
 172:	5a 83       	std	Y+2, r21	; 0x02
 174:	6b 83       	std	Y+3, r22	; 0x03
 176:	7c 83       	std	Y+4, r23	; 0x04
	int i, index = 0;
	
	if(n > 0){					// 문자열 변환
 178:	88 23       	and	r24, r24
 17a:	09 f1       	breq	.+66     	; 0x1be <UART1_print_1_byte_number+0x6a>
 17c:	fe 01       	movw	r30, r28
 17e:	31 96       	adiw	r30, 0x01	; 1
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; n != 0 ; i++)
		{
			numString[i] = n % 10 + '0';
 184:	4d ec       	ldi	r20, 0xCD	; 205
 186:	84 9f       	mul	r24, r20
 188:	91 2d       	mov	r25, r1
 18a:	11 24       	eor	r1, r1
 18c:	96 95       	lsr	r25
 18e:	96 95       	lsr	r25
 190:	96 95       	lsr	r25
 192:	39 2f       	mov	r19, r25
 194:	33 0f       	add	r19, r19
 196:	23 2f       	mov	r18, r19
 198:	22 0f       	add	r18, r18
 19a:	22 0f       	add	r18, r18
 19c:	23 0f       	add	r18, r19
 19e:	82 1b       	sub	r24, r18
 1a0:	80 5d       	subi	r24, 0xD0	; 208
 1a2:	81 93       	st	Z+, r24
			n = n / 10;
 1a4:	89 2f       	mov	r24, r25
{
	char numString[4] = "0";
	int i, index = 0;
	
	if(n > 0){					// 문자열 변환
		for(i = 0; n != 0 ; i++)
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	91 11       	cpse	r25, r1
 1ac:	ec cf       	rjmp	.-40     	; 0x186 <UART1_print_1_byte_number+0x32>
		{
			numString[i] = n % 10 + '0';
			n = n / 10;
		}
		numString[i] = '\0';
 1ae:	fe 01       	movw	r30, r28
 1b0:	e0 0f       	add	r30, r16
 1b2:	f1 1f       	adc	r31, r17
 1b4:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
 1b6:	01 50       	subi	r16, 0x01	; 1
 1b8:	11 09       	sbc	r17, r1
	}
	
	for(i = index; i >= 0; i--)		// 변환된 문자열을 역순으로 출력
 1ba:	1a f4       	brpl	.+6      	; 0x1c2 <UART1_print_1_byte_number+0x6e>
 1bc:	10 c0       	rjmp	.+32     	; 0x1de <UART1_print_1_byte_number+0x8a>
}

void UART1_print_1_byte_number(uint8_t n)
{
	char numString[4] = "0";
	int i, index = 0;
 1be:	00 e0       	ldi	r16, 0x00	; 0
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	ce 01       	movw	r24, r28
 1c4:	80 0f       	add	r24, r16
 1c6:	91 1f       	adc	r25, r17
 1c8:	9c 01       	movw	r18, r24
 1ca:	2e 5f       	subi	r18, 0xFE	; 254
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	79 01       	movw	r14, r18
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)		// 변환된 문자열을 역순으로 출력
	UART1_transmit(numString[i]);
 1d0:	f7 01       	movw	r30, r14
 1d2:	82 91       	ld	r24, -Z
 1d4:	7f 01       	movw	r14, r30
 1d6:	a8 df       	rcall	.-176    	; 0x128 <UART1_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)		// 변환된 문자열을 역순으로 출력
 1d8:	01 50       	subi	r16, 0x01	; 1
 1da:	11 09       	sbc	r17, r1
 1dc:	ca f7       	brpl	.-14     	; 0x1d0 <UART1_print_1_byte_number+0x7c>
	UART1_transmit(numString[i]);
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
