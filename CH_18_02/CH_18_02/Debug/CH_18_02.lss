
CH_18_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001be  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000ed  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b5  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000fd  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015c  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b4  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	19 d0       	rcall	.+50     	; 0xf6 <main>
  c4:	7a c0       	rjmp	.+244    	; 0x1ba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
#include <avr/interrupt.h>

volatile int interrupt_count = 0;		// 인터럽트 발생 횟수

ISR(TIMER0_OVF_vect)			// 타이머/카운터 0번 오버플로 인터럽트
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	interrupt_count++;
  d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <main>:

int main(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	2a 97       	sbiw	r28, 0x0a	; 10
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
	uint8_t numbers[]
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	e0 e0       	ldi	r30, 0x00	; 0
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	de 01       	movw	r26, r28
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	01 90       	ld	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	8a 95       	dec	r24
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x1e>
	= {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
	int count = 0;
	DDRB = 0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bb       	out	0x17, r24	; 23
	PORTB = numbers[0];			// 0에서 시작
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	88 bb       	out	0x18, r24	; 24
	
	// 타이머/카운터 0번 인터럽트 설정
	// 분주비를 1024로 설정
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
 124:	83 b7       	in	r24, 0x33	; 51
 126:	87 60       	ori	r24, 0x07	; 7
 128:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			// 오버플로 인터럽트 허용
 12a:	87 b7       	in	r24, 0x37	; 55
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	87 bf       	out	0x37, r24	; 55
	sei();							// 전역적으로 인터럽트 허용
 130:	78 94       	sei

int main(void)
{
	uint8_t numbers[]
	= {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
	int count = 0;
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	50 e0       	ldi	r21, 0x00	; 0
	while(1)
	{
		if(interrupt_count >= 64){		// 1초 경과
			interrupt_count = 0;		// 인터럽트 발생 횟수 초기화
			
			count = (count + 1) % 10;		// 표시할 숫자
 136:	0a e0       	ldi	r16, 0x0A	; 10
 138:	10 e0       	ldi	r17, 0x00	; 0
	TIMSK |= (1 << TOIE0);			// 오버플로 인터럽트 허용
	sei();							// 전역적으로 인터럽트 허용
	
	while(1)
	{
		if(interrupt_count >= 64){		// 1초 경과
 13a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 13e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 142:	20 34       	cpi	r18, 0x40	; 64
 144:	31 05       	cpc	r19, r1
 146:	cc f3       	brlt	.-14     	; 0x13a <main+0x44>
			interrupt_count = 0;		// 인터럽트 발생 횟수 초기화
 148:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 14c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			
			count = (count + 1) % 10;		// 표시할 숫자
 150:	ca 01       	movw	r24, r20
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	b8 01       	movw	r22, r16
 156:	0a d0       	rcall	.+20     	; 0x16c <__divmodhi4>
 158:	ac 01       	movw	r20, r24
			PORTB = numbers[count];		// 숫자 데이터 출력
 15a:	e1 e0       	ldi	r30, 0x01	; 1
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	e8 0f       	add	r30, r24
 164:	f9 1f       	adc	r31, r25
 166:	80 81       	ld	r24, Z
 168:	88 bb       	out	0x18, r24	; 24
 16a:	e7 cf       	rjmp	.-50     	; 0x13a <main+0x44>

0000016c <__divmodhi4>:
 16c:	97 fb       	bst	r25, 7
 16e:	07 2e       	mov	r0, r23
 170:	16 f4       	brtc	.+4      	; 0x176 <__divmodhi4+0xa>
 172:	00 94       	com	r0
 174:	06 d0       	rcall	.+12     	; 0x182 <__divmodhi4_neg1>
 176:	77 fd       	sbrc	r23, 7
 178:	08 d0       	rcall	.+16     	; 0x18a <__divmodhi4_neg2>
 17a:	0b d0       	rcall	.+22     	; 0x192 <__udivmodhi4>
 17c:	07 fc       	sbrc	r0, 7
 17e:	05 d0       	rcall	.+10     	; 0x18a <__divmodhi4_neg2>
 180:	3e f4       	brtc	.+14     	; 0x190 <__divmodhi4_exit>

00000182 <__divmodhi4_neg1>:
 182:	90 95       	com	r25
 184:	81 95       	neg	r24
 186:	9f 4f       	sbci	r25, 0xFF	; 255
 188:	08 95       	ret

0000018a <__divmodhi4_neg2>:
 18a:	70 95       	com	r23
 18c:	61 95       	neg	r22
 18e:	7f 4f       	sbci	r23, 0xFF	; 255

00000190 <__divmodhi4_exit>:
 190:	08 95       	ret

00000192 <__udivmodhi4>:
 192:	aa 1b       	sub	r26, r26
 194:	bb 1b       	sub	r27, r27
 196:	51 e1       	ldi	r21, 0x11	; 17
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <__udivmodhi4_ep>

0000019a <__udivmodhi4_loop>:
 19a:	aa 1f       	adc	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	a6 17       	cp	r26, r22
 1a0:	b7 07       	cpc	r27, r23
 1a2:	10 f0       	brcs	.+4      	; 0x1a8 <__udivmodhi4_ep>
 1a4:	a6 1b       	sub	r26, r22
 1a6:	b7 0b       	sbc	r27, r23

000001a8 <__udivmodhi4_ep>:
 1a8:	88 1f       	adc	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	5a 95       	dec	r21
 1ae:	a9 f7       	brne	.-22     	; 0x19a <__udivmodhi4_loop>
 1b0:	80 95       	com	r24
 1b2:	90 95       	com	r25
 1b4:	bc 01       	movw	r22, r24
 1b6:	cd 01       	movw	r24, r26
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
