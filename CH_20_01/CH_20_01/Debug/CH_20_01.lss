
CH_20_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000238  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000150  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b9  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a5  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00000949  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	08 d0       	rcall	.+16     	; 0xaa <main>
  9a:	37 c0       	rjmp	.+110    	; 0x10a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_port>:
}

void init_port(void)
{
	// ROW 관련 포트 설정
	DDR_ROW = 0xFF;			// 출력으로 설정
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	PORT_COL = data;
}

void write_row_data(uint8_t data)
{
	PORT_ROW = data;
  a2:	15 ba       	out	0x15, r1	; 21
	// ROW 관련 포트 설정
	DDR_ROW = 0xFF;			// 출력으로 설정
	write_row_data(0xFF * ROW_OFF);	// OFF 값 출력

	// COLUMN 관련 포트 설정
	DDR_COL = 0xFF;			// 출력으로 설정
  a4:	81 bb       	out	0x11, r24	; 17
#define ROW_ON			1
#define ROW_OFF		0

void write_column_data(uint8_t data)
{
	PORT_COL = data;
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret

000000aa <main>:
	write_column_data(0xFF * COL_OFF);	// OFF 값 출력
}

int main(void)
{
	init_port();
  aa:	f9 df       	rcall	.-14     	; 0x9e <init_port>
	
	while(1)
	{
		for(int col = 0; col < 8; col++){
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	b0 e0       	ldi	r27, 0x00	; 0
			for(int row = 0; row < 8; row++){
				// 공통 양극 방식
				// column에는 0을, ROW에는 1을 출력해야 해당 LED가 켜짐
				write_column_data(~(1 << col));
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	ac 2f       	mov	r26, r28
  b6:	5b 2f       	mov	r21, r27
{
	init_port();
	
	while(1)
	{
		for(int col = 0; col < 8; col++){
  b8:	ec 2f       	mov	r30, r28
  ba:	fb 2f       	mov	r31, r27
  bc:	1a c0       	rjmp	.+52     	; 0xf2 <main+0x48>
#define ROW_ON			1
#define ROW_OFF		0

void write_column_data(uint8_t data)
{
	PORT_COL = data;
  be:	42 bb       	out	0x12, r20	; 18
		for(int col = 0; col < 8; col++){
			for(int row = 0; row < 8; row++){
				// 공통 양극 방식
				// column에는 0을, ROW에는 1을 출력해야 해당 LED가 켜짐
				write_column_data(~(1 << col));
				write_row_data(1 << row);
  c0:	9b 01       	movw	r18, r22
  c2:	08 2e       	mov	r0, r24
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x20>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x1c>
	PORT_COL = data;
}

void write_row_data(uint8_t data)
{
	PORT_ROW = data;
  ce:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	31 ee       	ldi	r19, 0xE1	; 225
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	d0 40       	sbci	r29, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x2c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x36>
  e0:	00 00       	nop
	init_port();
	
	while(1)
	{
		for(int col = 0; col < 8; col++){
			for(int row = 0; row < 8; row++){
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	91 05       	cpc	r25, r1
  e8:	51 f7       	brne	.-44     	; 0xbe <main+0x14>
{
	init_port();
	
	while(1)
	{
		for(int col = 0; col < 8; col++){
  ea:	31 96       	adiw	r30, 0x01	; 1
  ec:	e8 30       	cpi	r30, 0x08	; 8
  ee:	f1 05       	cpc	r31, r1
  f0:	19 f3       	breq	.-58     	; 0xb8 <main+0xe>
			for(int row = 0; row < 8; row++){
				// 공통 양극 방식
				// column에는 0을, ROW에는 1을 출력해야 해당 LED가 켜짐
				write_column_data(~(1 << col));
  f2:	cb 01       	movw	r24, r22
  f4:	0e 2e       	mov	r0, r30
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x52>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <main+0x4e>
 100:	48 2f       	mov	r20, r24
 102:	40 95       	com	r20
 104:	8a 2f       	mov	r24, r26
 106:	95 2f       	mov	r25, r21
 108:	da cf       	rjmp	.-76     	; 0xbe <main+0x14>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
