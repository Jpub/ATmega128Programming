
CH_23_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000213  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000119  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e9  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000194  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	17 d0       	rcall	.+46     	; 0xc8 <main>
  9a:	5d c0       	rjmp	.+186    	; 0x156 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <InitializeTimer3>:
#define SpeedMotor1(s)			OCR3B = s

void InitializeTimer3(void)
{
	// 8비트 고속 PWM 모드
	TCCR3A |= (1 << WGM30);
  9e:	ab e8       	ldi	r26, 0x8B	; 139
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	8c 91       	ld	r24, X
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM32);
  a8:	ea e8       	ldi	r30, 0x8A	; 138
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	80 83       	st	Z, r24
	
	// 비반전 모드
	// TOP : 0xFF, 비교일치값 : OCR3B 레지스터
	TCCR3A |= (1 << COM3B1);
  b2:	8c 91       	ld	r24, X
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	8c 93       	st	X, r24
	
	// 분주비 64
	TCCR3B |= (1 << CS31) | (1 << CS30);
  b8:	80 81       	ld	r24, Z
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	80 83       	st	Z, r24
	
	OCR3B = 0;
  be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  c6:	08 95       	ret

000000c8 <main>:
}

int main(void)
{
	// 모터 제어를 위한 핀들을 출력으로 설정
	DDRE |= (1 << PE0) | (1 << PE2) | (1 << PE4);
  c8:	82 b1       	in	r24, 0x02	; 2
  ca:	85 61       	ori	r24, 0x15	; 21
  cc:	82 b9       	out	0x02, r24	; 2

	InitializeTimer3();			// 3번 타이머/카운터 설정
  ce:	e7 df       	rcall	.-50     	; 0x9e <InitializeTimer3>
	while(1)
	{
		EnableMotor1();
		ForwardMotor1();			// 시계방향 회전
		
		for(int i = 0; i < 256; i++){		// 속도 조절을 위한 PWM 신호 출력
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
			SpeedMotor1(i);			// 속도 제어 0~255
  d4:	e4 e8       	ldi	r30, 0x84	; 132
  d6:	f0 e0       	ldi	r31, 0x00	; 0

	InitializeTimer3();			// 3번 타이머/카운터 설정
	
	while(1)
	{
		EnableMotor1();
  d8:	1a 98       	cbi	0x03, 2	; 3
		ForwardMotor1();			// 시계방향 회전
  da:	18 98       	cbi	0x03, 0	; 3
		
		for(int i = 0; i < 256; i++){		// 속도 조절을 위한 PWM 신호 출력
  dc:	c9 01       	movw	r24, r18
			SpeedMotor1(i);			// 속도 제어 0~255
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	4f e7       	ldi	r20, 0x7F	; 127
  e4:	58 e3       	ldi	r21, 0x38	; 56
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	41 50       	subi	r20, 0x01	; 1
  ea:	50 40       	sbci	r21, 0x00	; 0
  ec:	60 40       	sbci	r22, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x20>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x2a>
  f2:	00 00       	nop
	while(1)
	{
		EnableMotor1();
		ForwardMotor1();			// 시계방향 회전
		
		for(int i = 0; i < 256; i++){		// 속도 조절을 위한 PWM 신호 출력
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	81 15       	cp	r24, r1
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	94 07       	cpc	r25, r20
  fc:	81 f7       	brne	.-32     	; 0xde <main+0x16>
  fe:	5f ef       	ldi	r21, 0xFF	; 255
 100:	63 ed       	ldi	r22, 0xD3	; 211
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	51 50       	subi	r21, 0x01	; 1
 106:	60 40       	sbci	r22, 0x00	; 0
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x3c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x46>
 10e:	00 00       	nop
			_delay_ms(25);
		}
		
		_delay_ms(1000);
		
		SpeedMotor1(0);			// 모터 정지
 110:	31 83       	std	Z+1, r19	; 0x01
 112:	20 83       	st	Z, r18
		DisableMotor1();
 114:	1a 9a       	sbi	0x03, 2	; 3
		
		EnableMotor1();
 116:	1a 98       	cbi	0x03, 2	; 3
		BackwardMotor1();			// 반시계방향 회전
 118:	18 9a       	sbi	0x03, 0	; 3
		
		for(int i = 0; i < 256; i++){		// 속도 조절을 위한 PWM 신호 출력
 11a:	c9 01       	movw	r24, r18
			SpeedMotor1(i);			// 속도 제어 0~255
 11c:	91 83       	std	Z+1, r25	; 0x01
 11e:	80 83       	st	Z, r24
 120:	4f e7       	ldi	r20, 0x7F	; 127
 122:	58 e3       	ldi	r21, 0x38	; 56
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	41 50       	subi	r20, 0x01	; 1
 128:	50 40       	sbci	r21, 0x00	; 0
 12a:	60 40       	sbci	r22, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x5e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x68>
 130:	00 00       	nop
		DisableMotor1();
		
		EnableMotor1();
		BackwardMotor1();			// 반시계방향 회전
		
		for(int i = 0; i < 256; i++){		// 속도 조절을 위한 PWM 신호 출력
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	81 15       	cp	r24, r1
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	94 07       	cpc	r25, r20
 13a:	81 f7       	brne	.-32     	; 0x11c <main+0x54>
 13c:	5f ef       	ldi	r21, 0xFF	; 255
 13e:	63 ed       	ldi	r22, 0xD3	; 211
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	51 50       	subi	r21, 0x01	; 1
 144:	60 40       	sbci	r22, 0x00	; 0
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x7a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x84>
 14c:	00 00       	nop
			_delay_ms(25);
		}
		
		_delay_ms(1000);
		
		SpeedMotor1(0);			// 모터 정지
 14e:	31 83       	std	Z+1, r19	; 0x01
 150:	20 83       	st	Z, r18
		DisableMotor1();
 152:	1a 9a       	sbi	0x03, 2	; 3
	}
 154:	c1 cf       	rjmp	.-126    	; 0xd8 <main+0x10>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
