
CH_23_04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000293  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000114  00000000  00000000  00000497  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a8  00000000  00000000  000005ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000189  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	40 c0       	rjmp	.+128    	; 0x11c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC |= 0x83;				// 모터 제어 핀을 출력으로 설정
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	83 68       	ori	r24, 0x83	; 131
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x80;			// 모터 제어 활성화 (Enable)
  a4:	af 9a       	sbi	0x15, 7	; 21
	
	while(1)
	{
		PORTC |= 0x02;			// 시계방향
  a6:	30 e9       	ldi	r19, 0x90	; 144
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a9 9a       	sbi	0x15, 1	; 21
  ac:	83 2f       	mov	r24, r19
  ae:	92 2f       	mov	r25, r18
		for(int i = 0; i < 400; i++){		// 400 스텝 진행
			PORTC |= 0x01;			// 상승 에지
  b0:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	ef e0       	ldi	r30, 0x0F	; 15
  b4:	f7 e2       	ldi	r31, 0x27	; 39
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x18>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1e>
  bc:	00 00       	nop
			_delay_us(2500);
			PORTC &= ~0x01;			// 하강 에지
  be:	a8 98       	cbi	0x15, 0	; 21
  c0:	ef e0       	ldi	r30, 0x0F	; 15
  c2:	f7 e2       	ldi	r31, 0x27	; 39
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x26>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x2c>
  ca:	00 00       	nop
  cc:	01 97       	sbiw	r24, 0x01	; 1
	PORTC |= 0x80;			// 모터 제어 활성화 (Enable)
	
	while(1)
	{
		PORTC |= 0x02;			// 시계방향
		for(int i = 0; i < 400; i++){		// 400 스텝 진행
  ce:	81 f7       	brne	.-32     	; 0xb0 <main+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	ff ef       	ldi	r31, 0xFF	; 255
  d2:	43 ed       	ldi	r20, 0xD3	; 211
  d4:	80 e3       	ldi	r24, 0x30	; 48
  d6:	f1 50       	subi	r31, 0x01	; 1
  d8:	40 40       	sbci	r20, 0x00	; 0
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x38>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x42>
  e0:	00 00       	nop
			PORTC &= ~0x01;			// 하강 에지
			_delay_us(2500);
		}
		_delay_ms(1000);

		PORTC &= ~0x02;			// 반시계방향
  e2:	a9 98       	cbi	0x15, 1	; 21
  e4:	83 2f       	mov	r24, r19
  e6:	92 2f       	mov	r25, r18
		for(int i = 0; i < 400; i++){		// 400 스텝 진행
			PORTC |= 0x01;			// 상승 에지
  e8:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ef e0       	ldi	r30, 0x0F	; 15
  ec:	f7 e2       	ldi	r31, 0x27	; 39
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x50>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x56>
  f4:	00 00       	nop
			_delay_us(2500);
			PORTC &= ~0x01;			// 하강 에지
  f6:	a8 98       	cbi	0x15, 0	; 21
  f8:	ef e0       	ldi	r30, 0x0F	; 15
  fa:	f7 e2       	ldi	r31, 0x27	; 39
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x5e>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x64>
 102:	00 00       	nop
 104:	01 97       	sbiw	r24, 0x01	; 1
			_delay_us(2500);
		}
		_delay_ms(1000);

		PORTC &= ~0x02;			// 반시계방향
		for(int i = 0; i < 400; i++){		// 400 스텝 진행
 106:	81 f7       	brne	.-32     	; 0xe8 <main+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	ff ef       	ldi	r31, 0xFF	; 255
 10a:	43 ed       	ldi	r20, 0xD3	; 211
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	f1 50       	subi	r31, 0x01	; 1
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x70>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x7a>
 118:	00 00       	nop
 11a:	c7 cf       	rjmp	.-114    	; 0xaa <main+0xc>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
