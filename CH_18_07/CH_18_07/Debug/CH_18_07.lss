
CH_18_07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000311  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000173  00000000  00000000  000007d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001fa  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e1  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016f  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a5 d0       	rcall	.+330    	; 0x20e <main>
  c4:	5b c1       	rjmp	.+694    	; 0x37c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:

volatile uint32_t millis = 0;
volatile uint16_t micros = 0;

ISR(TIMER0_OVF_vect)			// 타이머/카운터 0번 오버플로 인터럽트
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
	micros += MICROS_PER_OVERFLOW;
  ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  f6:	80 58       	subi	r24, 0x80	; 128
  f8:	9e 4f       	sbci	r25, 0xFE	; 254
  fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	millis += MILLIS_PER_OVERFLOW;
 102:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <millis>
 106:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <millis+0x1>
 10a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <millis+0x2>
 10e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <millis+0x3>
 112:	40 96       	adiw	r24, 0x10	; 16
 114:	a1 1d       	adc	r26, r1
 116:	b1 1d       	adc	r27, r1
 118:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <millis>
 11c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <millis+0x1>
 120:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <millis+0x2>
 124:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <millis+0x3>
	
	millis += (micros / 1000);
 128:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 12c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 130:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <millis>
 134:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <millis+0x1>
 138:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <millis+0x2>
 13c:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <millis+0x3>
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	36 95       	lsr	r19
 146:	27 95       	ror	r18
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	a5 ec       	ldi	r26, 0xC5	; 197
 14e:	b0 e2       	ldi	r27, 0x20	; 32
 150:	f2 d0       	rcall	.+484    	; 0x336 <__umulhisi3>
 152:	92 95       	swap	r25
 154:	82 95       	swap	r24
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	89 27       	eor	r24, r25
 15a:	9f 70       	andi	r25, 0x0F	; 15
 15c:	89 27       	eor	r24, r25
 15e:	c8 0e       	add	r12, r24
 160:	d9 1e       	adc	r13, r25
 162:	e1 1c       	adc	r14, r1
 164:	f1 1c       	adc	r15, r1
 166:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <millis>
 16a:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <millis+0x1>
 16e:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <millis+0x2>
 172:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <millis+0x3>
	micros %= 1000;
 176:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end>
 17a:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x1>
 17e:	9a 01       	movw	r18, r20
 180:	36 95       	lsr	r19
 182:	27 95       	ror	r18
 184:	36 95       	lsr	r19
 186:	27 95       	ror	r18
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	d4 d0       	rcall	.+424    	; 0x336 <__umulhisi3>
 18e:	92 95       	swap	r25
 190:	82 95       	swap	r24
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	89 27       	eor	r24, r25
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	89 27       	eor	r24, r25
 19a:	68 ee       	ldi	r22, 0xE8	; 232
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	86 9f       	mul	r24, r22
 1a0:	90 01       	movw	r18, r0
 1a2:	87 9f       	mul	r24, r23
 1a4:	30 0d       	add	r19, r0
 1a6:	96 9f       	mul	r25, r22
 1a8:	30 0d       	add	r19, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	ca 01       	movw	r24, r20
 1ae:	82 1b       	sub	r24, r18
 1b0:	93 0b       	sbc	r25, r19
 1b2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <display_digit>:

void display_digit(int position, int number)
{
	PORTC |= 0x0F;
 1e0:	25 b3       	in	r18, 0x15	; 21
 1e2:	2f 60       	ori	r18, 0x0F	; 15
 1e4:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1 << (position - 1));
 1e6:	45 b3       	in	r20, 0x15	; 21
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	f9 01       	movw	r30, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <display_digit+0x16>
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <display_digit+0x12>
 1fa:	cf 01       	movw	r24, r30
 1fc:	80 95       	com	r24
 1fe:	84 23       	and	r24, r20
 200:	85 bb       	out	0x15, r24	; 21
	
	PORTD = numbers[number];
 202:	fb 01       	movw	r30, r22
 204:	e0 50       	subi	r30, 0x00	; 0
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 81       	ld	r24, Z
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	08 95       	ret

0000020e <main>:
}

int main(void)
{
	DDRD = 0xFF;				// 세그먼트 제어핀 8개를 출력으로 설정
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;				// 자릿수 선택핀 4개를 출력으로 설정
 212:	8f e0       	ldi	r24, 0x0F	; 15
 214:	84 bb       	out	0x14, r24	; 20
	
	// 타이머/카운터 0번 인터럽트 설정
	// 분주비를 1024로 설정
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
 216:	83 b7       	in	r24, 0x33	; 51
 218:	87 60       	ori	r24, 0x07	; 7
 21a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			// 오버플로 인터럽트 허용
 21c:	87 b7       	in	r24, 0x37	; 55
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	87 bf       	out	0x37, r24	; 55
	sei();							// 전역적으로 인터럽트 허용
 222:	78 94       	sei
	
	while(1)
	{
		int temp = millis / 1000;
 224:	0f 2e       	mov	r0, r31
 226:	f8 ee       	ldi	r31, 0xE8	; 232
 228:	8f 2e       	mov	r8, r31
 22a:	f3 e0       	ldi	r31, 0x03	; 3
 22c:	9f 2e       	mov	r9, r31
 22e:	a1 2c       	mov	r10, r1
 230:	b1 2c       	mov	r11, r1
 232:	f0 2d       	mov	r31, r0

		int minutes = (temp / 60) % 60;	// 분 계산
 234:	0f 2e       	mov	r0, r31
 236:	fc e3       	ldi	r31, 0x3C	; 60
 238:	ef 2e       	mov	r14, r31
 23a:	f1 2c       	mov	r15, r1
 23c:	f0 2d       	mov	r31, r0
		int seconds = temp % 60;		// 초 계산
		
		// 분을 두 자리로 나누어 표시
		display_digit(1, minutes / 10);
 23e:	0a e0       	ldi	r16, 0x0A	; 10
 240:	10 e0       	ldi	r17, 0x00	; 0
	TIMSK |= (1 << TOIE0);			// 오버플로 인터럽트 허용
	sei();							// 전역적으로 인터럽트 허용
	
	while(1)
	{
		int temp = millis / 1000;
 242:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <millis>
 246:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <millis+0x1>
 24a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <millis+0x2>
 24e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <millis+0x3>
 252:	a5 01       	movw	r20, r10
 254:	94 01       	movw	r18, r8
 256:	4d d0       	rcall	.+154    	; 0x2f2 <__udivmodsi4>

		int minutes = (temp / 60) % 60;	// 분 계산
 258:	c9 01       	movw	r24, r18
 25a:	b7 01       	movw	r22, r14
 25c:	37 d0       	rcall	.+110    	; 0x2cc <__divmodhi4>
 25e:	d8 2f       	mov	r29, r24
 260:	c9 2f       	mov	r28, r25
 262:	cb 01       	movw	r24, r22
 264:	b7 01       	movw	r22, r14
 266:	32 d0       	rcall	.+100    	; 0x2cc <__divmodhi4>
		int seconds = temp % 60;		// 초 계산
		
		// 분을 두 자리로 나누어 표시
		display_digit(1, minutes / 10);
 268:	b8 01       	movw	r22, r16
 26a:	30 d0       	rcall	.+96     	; 0x2cc <__divmodhi4>
 26c:	6c 01       	movw	r12, r24
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	b6 df       	rcall	.-148    	; 0x1e0 <display_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	9e e4       	ldi	r25, 0x4E	; 78
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x6a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x70>
 27e:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		display_digit(2, minutes % 10);
 280:	b6 01       	movw	r22, r12
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac df       	rcall	.-168    	; 0x1e0 <display_digit>
 288:	8f e1       	ldi	r24, 0x1F	; 31
 28a:	9e e4       	ldi	r25, 0x4E	; 78
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x7e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x84>
 292:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);

		// 초를 두 자리로 나누어 표시
		display_digit(3, seconds / 10);
 294:	8d 2f       	mov	r24, r29
 296:	9c 2f       	mov	r25, r28
 298:	b8 01       	movw	r22, r16
 29a:	18 d0       	rcall	.+48     	; 0x2cc <__divmodhi4>
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	9f df       	rcall	.-194    	; 0x1e0 <display_digit>
 2a2:	8f e1       	ldi	r24, 0x1F	; 31
 2a4:	9e e4       	ldi	r25, 0x4E	; 78
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x98>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x9e>
 2ac:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		display_digit(4, seconds % 10);
 2ae:	8d 2f       	mov	r24, r29
 2b0:	9c 2f       	mov	r25, r28
 2b2:	b8 01       	movw	r22, r16
 2b4:	0b d0       	rcall	.+22     	; 0x2cc <__divmodhi4>
 2b6:	bc 01       	movw	r22, r24
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	91 df       	rcall	.-222    	; 0x1e0 <display_digit>
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	9e e4       	ldi	r25, 0x4E	; 78
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0xb4>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0xba>
 2c8:	00 00       	nop
 2ca:	bb cf       	rjmp	.-138    	; 0x242 <main+0x34>

000002cc <__divmodhi4>:
 2cc:	97 fb       	bst	r25, 7
 2ce:	07 2e       	mov	r0, r23
 2d0:	16 f4       	brtc	.+4      	; 0x2d6 <__divmodhi4+0xa>
 2d2:	00 94       	com	r0
 2d4:	06 d0       	rcall	.+12     	; 0x2e2 <__divmodhi4_neg1>
 2d6:	77 fd       	sbrc	r23, 7
 2d8:	08 d0       	rcall	.+16     	; 0x2ea <__divmodhi4_neg2>
 2da:	3c d0       	rcall	.+120    	; 0x354 <__udivmodhi4>
 2dc:	07 fc       	sbrc	r0, 7
 2de:	05 d0       	rcall	.+10     	; 0x2ea <__divmodhi4_neg2>
 2e0:	3e f4       	brtc	.+14     	; 0x2f0 <__divmodhi4_exit>

000002e2 <__divmodhi4_neg1>:
 2e2:	90 95       	com	r25
 2e4:	81 95       	neg	r24
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	08 95       	ret

000002ea <__divmodhi4_neg2>:
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255

000002f0 <__divmodhi4_exit>:
 2f0:	08 95       	ret

000002f2 <__udivmodsi4>:
 2f2:	a1 e2       	ldi	r26, 0x21	; 33
 2f4:	1a 2e       	mov	r1, r26
 2f6:	aa 1b       	sub	r26, r26
 2f8:	bb 1b       	sub	r27, r27
 2fa:	fd 01       	movw	r30, r26
 2fc:	0d c0       	rjmp	.+26     	; 0x318 <__udivmodsi4_ep>

000002fe <__udivmodsi4_loop>:
 2fe:	aa 1f       	adc	r26, r26
 300:	bb 1f       	adc	r27, r27
 302:	ee 1f       	adc	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	a2 17       	cp	r26, r18
 308:	b3 07       	cpc	r27, r19
 30a:	e4 07       	cpc	r30, r20
 30c:	f5 07       	cpc	r31, r21
 30e:	20 f0       	brcs	.+8      	; 0x318 <__udivmodsi4_ep>
 310:	a2 1b       	sub	r26, r18
 312:	b3 0b       	sbc	r27, r19
 314:	e4 0b       	sbc	r30, r20
 316:	f5 0b       	sbc	r31, r21

00000318 <__udivmodsi4_ep>:
 318:	66 1f       	adc	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	1a 94       	dec	r1
 322:	69 f7       	brne	.-38     	; 0x2fe <__udivmodsi4_loop>
 324:	60 95       	com	r22
 326:	70 95       	com	r23
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	bd 01       	movw	r22, r26
 332:	cf 01       	movw	r24, r30
 334:	08 95       	ret

00000336 <__umulhisi3>:
 336:	a2 9f       	mul	r26, r18
 338:	b0 01       	movw	r22, r0
 33a:	b3 9f       	mul	r27, r19
 33c:	c0 01       	movw	r24, r0
 33e:	a3 9f       	mul	r26, r19
 340:	70 0d       	add	r23, r0
 342:	81 1d       	adc	r24, r1
 344:	11 24       	eor	r1, r1
 346:	91 1d       	adc	r25, r1
 348:	b2 9f       	mul	r27, r18
 34a:	70 0d       	add	r23, r0
 34c:	81 1d       	adc	r24, r1
 34e:	11 24       	eor	r1, r1
 350:	91 1d       	adc	r25, r1
 352:	08 95       	ret

00000354 <__udivmodhi4>:
 354:	aa 1b       	sub	r26, r26
 356:	bb 1b       	sub	r27, r27
 358:	51 e1       	ldi	r21, 0x11	; 17
 35a:	07 c0       	rjmp	.+14     	; 0x36a <__udivmodhi4_ep>

0000035c <__udivmodhi4_loop>:
 35c:	aa 1f       	adc	r26, r26
 35e:	bb 1f       	adc	r27, r27
 360:	a6 17       	cp	r26, r22
 362:	b7 07       	cpc	r27, r23
 364:	10 f0       	brcs	.+4      	; 0x36a <__udivmodhi4_ep>
 366:	a6 1b       	sub	r26, r22
 368:	b7 0b       	sbc	r27, r23

0000036a <__udivmodhi4_ep>:
 36a:	88 1f       	adc	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	5a 95       	dec	r21
 370:	a9 f7       	brne	.-22     	; 0x35c <__udivmodhi4_loop>
 372:	80 95       	com	r24
 374:	90 95       	com	r25
 376:	bc 01       	movw	r22, r24
 378:	cd 01       	movw	r24, r26
 37a:	08 95       	ret

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
