
CH_23_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000276  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000137  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001da  00000000  00000000  00000645  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b1  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	34 d0       	rcall	.+104    	; 0x11c <main>
  b4:	62 c0       	rjmp	.+196    	; 0x17a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <stepForward>:
uint8_t step_data[] = {0x01, 0x02, 0x04, 0x08};
int step_index = -1;			// 현재 상태

uint8_t stepForward(void)			// 시계방향 회전
{
	step_index++;
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  c0:	01 96       	adiw	r24, 0x01	; 1
	if(step_index >= 4) step_index = 0;
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	91 05       	cpc	r25, r1
  c6:	2c f4       	brge	.+10     	; 0xd2 <stepForward+0x1a>
uint8_t step_data[] = {0x01, 0x02, 0x04, 0x08};
int step_index = -1;			// 현재 상태

uint8_t stepForward(void)			// 시계방향 회전
{
	step_index++;
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  d0:	04 c0       	rjmp	.+8      	; 0xda <stepForward+0x22>
	if(step_index >= 4) step_index = 0;
  d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>

	return step_data[step_index];
  da:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
  de:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
  e2:	ee 5f       	subi	r30, 0xFE	; 254
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
}
  e6:	80 81       	ld	r24, Z
  e8:	08 95       	ret

000000ea <stepBackward>:

uint8_t stepBackward(void)		// 반시계방향 회전
{
	step_index--;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f2:	01 97       	sbiw	r24, 0x01	; 1
	if(step_index < 0) step_index = 3;
  f4:	2a f0       	brmi	.+10     	; 0x100 <stepBackward+0x16>
	return step_data[step_index];
}

uint8_t stepBackward(void)		// 반시계방향 회전
{
	step_index--;
  f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  fe:	06 c0       	rjmp	.+12     	; 0x10c <stepBackward+0x22>
	if(step_index < 0) step_index = 3;
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	return step_data[step_index];
 10c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 110:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 114:	ee 5f       	subi	r30, 0xFE	; 254
 116:	fe 4f       	sbci	r31, 0xFE	; 254
}
 118:	80 81       	ld	r24, Z
 11a:	08 95       	ret

0000011c <main>:

int main(void)
{
	DDRC = 0x0F;				// 모터 제어 핀을 출력으로 설정
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	84 bb       	out	0x14, r24	; 20
	
	return step_data[step_index];
}

int main(void)
{
 120:	08 ec       	ldi	r16, 0xC8	; 200
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	c0 2f       	mov	r28, r16
 126:	d1 2f       	mov	r29, r17
	DDRC = 0x0F;				// 모터 제어 핀을 출력으로 설정
	
	while(1)
	{
		for(int i = 0; i < 200; i++){		// 200 스텝 진행
			PORTC = stepForward();		// 시계방향
 128:	c7 df       	rcall	.-114    	; 0xb8 <stepForward>
 12a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x14>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x1a>
 136:	00 00       	nop
 138:	21 97       	sbiw	r28, 0x01	; 1
{
	DDRC = 0x0F;				// 모터 제어 핀을 출력으로 설정
	
	while(1)
	{
		for(int i = 0; i < 200; i++){		// 200 스텝 진행
 13a:	b1 f7       	brne	.-20     	; 0x128 <main+0xc>
 13c:	9f ef       	ldi	r25, 0xFF	; 255
 13e:	23 ed       	ldi	r18, 0xD3	; 211
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	91 50       	subi	r25, 0x01	; 1
 144:	20 40       	sbci	r18, 0x00	; 0
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x26>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x30>
 14c:	00 00       	nop
 14e:	c0 2f       	mov	r28, r16
 150:	d1 2f       	mov	r29, r17
			_delay_ms(5);			// 스텝 간격은 5ms
		}
		_delay_ms(1000);
		
		for(int i = 0; i < 200; i++){		// 200 스텝 진행
			PORTC = stepBackward();		// 반시계방향
 152:	cb df       	rcall	.-106    	; 0xea <stepBackward>
 154:	85 bb       	out	0x15, r24	; 21
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x3e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x44>
 160:	00 00       	nop
 162:	21 97       	sbiw	r28, 0x01	; 1
			
			_delay_ms(5);			// 스텝 간격은 5ms
		}
		_delay_ms(1000);
		
		for(int i = 0; i < 200; i++){		// 200 스텝 진행
 164:	b1 f7       	brne	.-20     	; 0x152 <main+0x36>
 166:	9f ef       	ldi	r25, 0xFF	; 255
 168:	23 ed       	ldi	r18, 0xD3	; 211
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	91 50       	subi	r25, 0x01	; 1
 16e:	20 40       	sbci	r18, 0x00	; 0
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x50>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x5a>
 176:	00 00       	nop
 178:	d5 cf       	rjmp	.-86     	; 0x124 <main+0x8>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
